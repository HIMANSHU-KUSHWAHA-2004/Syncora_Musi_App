<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Music Sync App</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.7.2/socket.io.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
        }

        .container {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            padding: 2rem;
            width: 90%;
            max-width: 600px;
            box-shadow: 0 8px 32px rgba(31, 38, 135, 0.37);
            border: 1px solid rgba(255, 255, 255, 0.18);
        }

        h1 {
            text-align: center;
            margin-bottom: 2rem;
            font-size: 2.5rem;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .mode-selector {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            justify-content: center;
        }

        .mode-btn {
            padding: 0.8rem 1.5rem;
            border: 2px solid rgba(255, 255, 255, 0.3);
            background: rgba(255, 255, 255, 0.1);
            color: white;
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 1rem;
        }

        .mode-btn:hover {
            background: rgba(255, 255, 255, 0.2);
            transform: translateY(-2px);
        }

        .mode-btn.active {
            background: rgba(255, 255, 255, 0.3);
            border-color: white;
        }

        .upload-section {
            margin-bottom: 2rem;
            text-align: center;
        }

        .file-input-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
            margin-bottom: 1rem;
        }

        .file-input {
            position: absolute;
            left: -9999px;
        }

        .file-input-label {
            padding: 1rem 2rem;
            background: rgba(255, 255, 255, 0.2);
            border: 2px dashed rgba(255, 255, 255, 0.5);
            border-radius: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            font-size: 1rem;
        }

        .file-input-label:hover {
            background: rgba(255, 255, 255, 0.3);
            border-color: white;
        }

        .upload-btn {
            padding: 0.8rem 2rem;
            background: #4CAF50;
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
            margin-left: 1rem;
        }

        .upload-btn:hover {
            background: #45a049;
            transform: translateY(-2px);
        }

        .upload-btn:disabled {
            background: #666;
            cursor: not-allowed;
            transform: none;
        }

        .player {
            background: rgba(0, 0, 0, 0.2);
            border-radius: 15px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .song-info {
            text-align: center;
            margin-bottom: 1rem;
        }

        .song-title {
            font-size: 1.2rem;
            font-weight: bold;
            margin-bottom: 0.5rem;
        }

        .audio-player {
            width: 100%;
            margin-bottom: 1rem;
            border-radius: 10px;
        }

        .controls {
            display: flex;
            justify-content: center;
            gap: 1rem;
            margin-bottom: 1rem;
        }

        .control-btn {
            padding: 0.8rem 1.5rem;
            background: rgba(255, 255, 255, 0.2);
            color: white;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .control-btn:hover {
            background: rgba(255, 255, 255, 0.3);
            transform: translateY(-2px);
        }

        .control-btn:disabled {
            background: rgba(255, 255, 255, 0.1);
            cursor: not-allowed;
            transform: none;
        }

        .status {
            text-align: center;
            padding: 1rem;
            background: rgba(0, 0, 0, 0.2);
            border-radius: 10px;
            margin-bottom: 1rem;
        }

        .status-item {
            margin: 0.5rem 0;
        }

        .connection-status {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
        }

        .status-indicator {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            background: #ff4444;
            animation: pulse 2s infinite;
        }

        .status-indicator.connected {
            background: #44ff44;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        .hidden {
            display: none;
        }

        .progress-container {
            margin: 1rem 0;
        }

        .progress-bar {
            width: 100%;
            height: 6px;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 3px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: #4CAF50;
            width: 0%;
            transition: width 0.1s linear;
        }

        .time-display {
            display: flex;
            justify-content: space-between;
            font-size: 0.9rem;
            margin-top: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸŽµ Music Sync</h1>
        
        <div class="mode-selector">
            <button class="mode-btn active" id="hostBtn">Host</button>
            <button class="mode-btn" id="clientBtn">Client</button>
        </div>

        <div class="upload-section" id="uploadSection">
            <div class="file-input-wrapper">
                <input type="file" id="audioFile" class="file-input" accept="audio/*">
                <label for="audioFile" class="file-input-label">Choose Audio File</label>
            </div>
            <button class="upload-btn" id="uploadBtn" disabled>Upload</button>
        </div>

        <div class="player">
            <div class="song-info">
                <div class="song-title" id="songTitle">No song loaded</div>
            </div>
            
            <audio class="audio-player" id="audioPlayer" controls>
                Your browser does not support the audio element.
            </audio>

            <div class="progress-container">
                <div class="progress-bar">
                    <div class="progress-fill" id="progressFill"></div>
                </div>
                <div class="time-display">
                    <span id="currentTime">0:00</span>
                    <span id="duration">0:00</span>
                </div>
            </div>

            <div class="controls" id="hostControls">
                <button class="control-btn" id="playBtn">Play</button>
                <button class="control-btn" id="pauseBtn">Pause</button>
            </div>
        </div>

        <div class="status">
            <div class="connection-status">
                <div class="status-indicator" id="connectionIndicator"></div>
                <span id="connectionStatus">Connecting...</span>
            </div>
            <div class="status-item">
                <span>Connected Clients: </span>
                <span id="clientCount">0</span>
            </div>
            <div class="status-item">
                <span>Mode: </span>
                <span id="currentMode">Host</span>
            </div>
        </div>
    </div>

    <script>
        // Initialize Socket.IO
        const socket = io();
        
        // DOM elements
        const hostBtn = document.getElementById('hostBtn');
        const clientBtn = document.getElementById('clientBtn');
        const uploadSection = document.getElementById('uploadSection');
        const audioFile = document.getElementById('audioFile');
        const uploadBtn = document.getElementById('uploadBtn');
        const audioPlayer = document.getElementById('audioPlayer');
        const songTitle = document.getElementById('songTitle');
        const playBtn = document.getElementById('playBtn');
        const pauseBtn = document.getElementById('pauseBtn');
        const hostControls = document.getElementById('hostControls');
        const connectionIndicator = document.getElementById('connectionIndicator');
        const connectionStatus = document.getElementById('connectionStatus');
        const clientCount = document.getElementById('clientCount');
        const currentMode = document.getElementById('currentMode');
        const progressFill = document.getElementById('progressFill');
        const currentTime = document.getElementById('currentTime');
        const duration = document.getElementById('duration');

        // State
        let isHost = true;
        let isConnected = false;
        let currentSong = null;
        let syncInProgress = false;

        // Initialize
        setMode('host');

        // Mode switching
        hostBtn.addEventListener('click', () => setMode('host'));
        clientBtn.addEventListener('click', () => setMode('client'));

        function setMode(mode) {
            isHost = mode === 'host';
            
            // Update button states
            hostBtn.classList.toggle('active', isHost);
            clientBtn.classList.toggle('active', !isHost);
            
            // Show/hide sections
            uploadSection.classList.toggle('hidden', !isHost);
            hostControls.style.display = isHost ? 'flex' : 'none';
            
            // Update mode display
            currentMode.textContent = isHost ? 'Host' : 'Client';
            
            // Enable/disable audio controls
            audioPlayer.controls = isHost;
            
            if (!isHost) {
                // Request current state from host when switching to client mode
                socket.emit('request_host_status');
            }
        }

        // File handling
        audioFile.addEventListener('change', function() {
            uploadBtn.disabled = !this.files.length;
        });

        uploadBtn.addEventListener('click', async function() {
            const file = audioFile.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('audio', file);

            try {
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Uploading...';
                
                const response = await fetch('/upload', {
                    method: 'POST',
                    body: formData
                });

                const result = await response.json();
                
                if (response.ok) {
                    console.log('Upload successful:', result.filename);
                    audioFile.value = '';
                } else {
                    alert('Upload failed: ' + result.error);
                }
            } catch (error) {
                console.error('Upload error:', error);
                alert('Upload failed: ' + error.message);
            } finally {
                uploadBtn.disabled = true;
                uploadBtn.textContent = 'Upload';
            }
        });

        // Audio player controls (host only)
        playBtn.addEventListener('click', function() {
            if (isHost && currentSong && audioPlayer.src) {
                audioPlayer.play();
                socket.emit('play', { position: audioPlayer.currentTime });
            }
        });

        pauseBtn.addEventListener('click', function() {
            if (isHost && currentSong && audioPlayer.src) {
                audioPlayer.pause();
                socket.emit('pause', { position: audioPlayer.currentTime });
            }
        });

        // Audio player events (host only)
        audioPlayer.addEventListener('play', function() {
            if (isHost && !syncInProgress) {
                socket.emit('play', { position: audioPlayer.currentTime });
            }
        });

        audioPlayer.addEventListener('pause', function() {
            if (isHost && !syncInProgress) {
                socket.emit('pause', { position: audioPlayer.currentTime });
            }
        });

        audioPlayer.addEventListener('seeked', function() {
            if (isHost && !syncInProgress) {
                socket.emit('seek', { position: audioPlayer.currentTime });
            }
        });

        // Update progress bar and time display
        audioPlayer.addEventListener('timeupdate', function() {
            if (audioPlayer.duration) {
                const progress = (audioPlayer.currentTime / audioPlayer.duration) * 100;
                progressFill.style.width = progress + '%';
                
                currentTime.textContent = formatTime(audioPlayer.currentTime);
                duration.textContent = formatTime(audioPlayer.duration);
            }
        });

        audioPlayer.addEventListener('loadedmetadata', function() {
            duration.textContent = formatTime(audioPlayer.duration);
        });

        function formatTime(seconds) {
            const mins = Math.floor(seconds / 60);
            const secs = Math.floor(seconds % 60);
            return `${mins}:${secs.toString().padStart(2, '0')}`;
        }

        // Socket events
        socket.on('connect', function() {
            isConnected = true;
            connectionIndicator.classList.add('connected');
            connectionStatus.textContent = 'Connected';
            console.log('Connected to server');
        });

        socket.on('disconnect', function() {
            isConnected = false;
            connectionIndicator.classList.remove('connected');
            connectionStatus.textContent = 'Disconnected';
            console.log('Disconnected from server');
        });

        socket.on('song_changed', function(data) {
            console.log('Song changed:', data);
            loadSong(data.song);
            
            if (!isHost) {
                syncInProgress = true;
                audioPlayer.currentTime = data.position;
                if (data.is_playing) {
                    audioPlayer.play();
                } else {
                    audioPlayer.pause();
                }
                syncInProgress = false;
            }
        });

        socket.on('play', function(data) {
            if (!isHost) {
                console.log('Received play command:', data);
                syncInProgress = true;
                audioPlayer.currentTime = data.position;
                audioPlayer.play();
                syncInProgress = false;
            }
        });

        socket.on('pause', function(data) {
            if (!isHost) {
                console.log('Received pause command:', data);
                syncInProgress = true;
                audioPlayer.currentTime = data.position;
                audioPlayer.pause();
                syncInProgress = false;
            }
        });

        socket.on('seek', function(data) {
            if (!isHost) {
                console.log('Received seek command:', data);
                syncInProgress = true;
                audioPlayer.currentTime = data.position;
                syncInProgress = false;
            }
        });

        socket.on('sync_state', function(data) {
            console.log('Received sync state:', data);
            if (data.song) {
                loadSong(data.song);
                
                if (!isHost) {
                    syncInProgress = true;
                    audioPlayer.currentTime = data.position;
                    if (data.is_playing) {
                        audioPlayer.play();
                    } else {
                        audioPlayer.pause();
                    }
                    syncInProgress = false;
                }
            }
        });

        socket.on('host_status_response', function(data) {
            console.log('Host status response:', data);
            if (data.song) {
                loadSong(data.song);
                
                if (!isHost) {
                    syncInProgress = true;
                    audioPlayer.currentTime = data.position;
                    if (data.is_playing) {
                        audioPlayer.play();
                    } else {
                        audioPlayer.pause();
                    }
                    syncInProgress = false;
                }
            }
        });

        socket.on('client_count', function(data) {
            clientCount.textContent = data.count;
        });

        function loadSong(filename) {
            if (filename) {
                currentSong = filename;
                audioPlayer.src = `/audio/${filename}`;
                songTitle.textContent = filename;
                console.log('Loaded song:', filename);
            } else {
                currentSong = null;
                audioPlayer.src = '';
                songTitle.textContent = 'No song loaded';
            }
        }
    </script>
</body>
</html>